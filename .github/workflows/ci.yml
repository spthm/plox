name: Lint and test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  tests:
    name: Lint and test

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        python-version: ["3.9", "3.10"]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install poetry
      run: pipx install poetry==1.1.13

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3.1.0
      with:
        python-version: ${{ matrix.python-version }}
        cache: "poetry"

    - name: Get Tox env
      id: tox-env
      run: |
        echo ::set-output name=env::$(echo py${{ matrix.python-version }} | tr -d .)

    - name: Cache mypy cache
      uses: actions/cache@v3.0.1
      with:
        # Don't need to be so careful here,
        #   https://github.com/python/mypy/issues/10221#issuecomment-801330908
        key: mypy-cache-ci-${{ runner.os }}-${{ matrix.python-version }}
        path: .mypy_cache

    - name: Install dependencies
      # poetry uses the default Python version (3.8); we need to point it to
      # the correct executable. See also actions/setup-python issue #374,
      # although this seems like a poetry bug.
      run: |
        poetry env use ${{ matrix.python-version }}
        poetry install

    - name: Check formatting with black and isort
      run: |
        poetry run isort --check --diff src/ tests/
        poetry run black --check --diff src/ tests/

    - name: Lint with flake8, pylint and mypy
      run: |
        poetry run flake8 --show-source src/ tests/
        poetry run pylint src/ tests/
        poetry run mypy src/ tests/

    - name: Run tests
      # We only want to *see* test results in this step, not coverage info.
      run: |
        poetry run tox -e ${{ steps.tox-env.outputs.env }} -- --cov --cov-config=pyproject.toml --cov-report=

    - name: Upload coverage data for Python ${{ matrix.python-version }}
      uses: actions/upload-artifact@v3
      with:
        name: coverage-data
        path: ".coverage.${{ steps.tox-env.outputs.env }}"

  coverage:
    name: Produce coverage report

    needs: tests

    runs-on: ubuntu-latest

    steps:
        # Get our coverage configuration file (pyproject.toml).
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v3.1.0
        with:
          python-version: "3.10"

      - name: Install coverage
        run: python -m pip install coverage[toml]

      - name: Download all coverage data
        uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage reports
        run: |
          python -m coverage combine
          python -m coverage xml
          python -m coverage report

      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v2
